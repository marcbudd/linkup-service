definitions:
  models.ChatOfUserGetResponseDTO:
    properties:
      chatPartner:
        $ref: '#/definitions/models.UserGetResponseDTO'
      lastMessage:
        type: string
      lastMessageCreatedAt:
        type: string
      lastMessageIsSender:
        description: is true if last message was sent by currentUser
        type: boolean
      numberOfUnreadMessages:
        type: integer
    type: object
  models.CommentCreateRequestDTO:
    properties:
      comment:
        maxLength: 280
        type: string
      postId:
        type: integer
    required:
    - comment
    - postId
    type: object
  models.CommentGetResponseDTO:
    properties:
      comment:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      user:
        $ref: '#/definitions/models.UserGetResponseDTO'
    type: object
  models.LikeGetResponseDTO:
    properties:
      id:
        type: integer
      image:
        type: string
      name:
        type: string
      userID:
        type: integer
      username:
        type: string
    type: object
  models.MessageCreateRequestDTO:
    properties:
      receiverID:
        type: integer
      text:
        type: string
    required:
    - receiverID
    - text
    type: object
  models.MessageGetResponseDTO:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      isSender:
        description: is true if the message was written by you, false if it was written
          to you
        type: boolean
      text:
        type: string
    type: object
  models.MessagesOfChatGetResponseDTO:
    properties:
      chatPartner:
        allOf:
        - $ref: '#/definitions/models.UserGetResponseDTO'
        description: the user that is the chat partner of the current chat
      currentUser:
        allOf:
        - $ref: '#/definitions/models.UserGetResponseDTO'
        description: the user that is logged in, making the request
      messages:
        items:
          $ref: '#/definitions/models.MessageGetResponseDTO'
        type: array
    type: object
  models.PostCreateRequestDTO:
    properties:
      content:
        maxLength: 280
        type: string
    required:
    - content
    type: object
  models.PostGetResponseDTO:
    properties:
      content:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      likedByCurrentUser:
        type: boolean
      numberOfComments:
        type: integer
      numberOfLikes:
        type: integer
      user:
        $ref: '#/definitions/models.UserGetResponseDTO'
    type: object
  models.UserCreateRequestDTO:
    properties:
      bio:
        type: string
      birthDate:
        type: string
      email:
        type: string
      image:
        type: string
      name:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  models.UserDetailGetResponseDTO:
    properties:
      bio:
        type: string
      birthDate:
        type: string
      followedByCurrentUser:
        type: boolean
      id:
        type: integer
      image:
        type: string
      name:
        type: string
      numberFollowers:
        type: integer
      numberFollowing:
        type: integer
      username:
        type: string
    type: object
  models.UserGetResponseDTO:
    properties:
      bio:
        type: string
      birthDate:
        type: string
      id:
        type: integer
      image:
        type: string
      name:
        type: string
      username:
        type: string
    type: object
  models.UserLoginRequestDTO:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.UserUpdatePasswordForgottenRequestDTO:
    properties:
      email:
        type: string
    type: object
  models.UserUpdatePasswortRequestDTO:
    properties:
      newPassword:
        type: string
      oldPassword:
        type: string
    type: object
  models.UserUpdateRequestDTO:
    properties:
      bio:
        type: string
      name:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/comments:
    post:
      consumes:
      - application/json
      description: Create a new comment
      parameters:
      - description: Comment creation data
        in: body
        name: commentCreateRequestDTO
        required: true
        schema:
          $ref: '#/definitions/models.CommentCreateRequestDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.CommentGetResponseDTO'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Create a comment
      tags:
      - Comments
  /api/comments/{commentID}:
    delete:
      description: Deletes a comment with the specified commentID
      parameters:
      - description: Comment ID
        in: path
        name: commentID
        required: true
        type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      summary: Delete a comment
      tags:
      - Comments
  /api/comments/posts/{postID}:
    get:
      description: Retrieves comments associated with the specified postID
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Get comments by post ID
      tags:
      - Comments
  /api/follows/{followedUserID}:
    delete:
      description: Deletes the follow relationship between the logged-in user and
        the user with the specified followedUserID
      parameters:
      - description: Followed User ID
        in: path
        name: followedUserID
        required: true
        type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Delete a follow relationship
      tags:
      - Follows
    post:
      description: Creates a follow relationship between the logged-in user and the
        user with the specified followedUserID
      parameters:
      - description: Followed User ID
        in: path
        name: followedUserID
        required: true
        type: string
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Create a follow relationship
      tags:
      - Follows
  /api/follows/{userID}/followers:
    get:
      description: Retrieves the list of followers for the user with the specified
        userID
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Get followers of a user
      tags:
      - Follows
  /api/follows/{userID}/followings:
    get:
      description: Retrieves the list of followings for the user with the specified
        userID
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Get followings of a user
      tags:
      - Follows
  /api/likes/{postID}:
    delete:
      description: Deletes the like for the post with the specified postID
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Delete a like for a post
      tags:
      - Likes
    get:
      description: Retrieves the likes for the post with the specified postID
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LikeGetResponseDTO'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Get likes for a post
      tags:
      - Likes
    post:
      description: Creates a like for the post with the specified postID
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: string
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Create a like for a post
      tags:
      - Likes
  /api/messages:
    get:
      description: Retrieves chats associated with the logged-in user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ChatOfUserGetResponseDTO'
            type: array
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Get chats by user ID
      tags:
      - Messages
    post:
      consumes:
      - application/json
      description: Creates a new message sent by the logged-in user
      parameters:
      - description: Message data
        in: body
        name: messageCreateRequestDTO
        required: true
        schema:
          $ref: '#/definitions/models.MessageCreateRequestDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Create a new message
      tags:
      - Messages
  /api/messages/{chatPartnerID}:
    get:
      description: Retrieves messages between the logged-in user and a chat partner
      parameters:
      - description: ID of the chat partner
        in: path
        name: chatPartnerID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.MessagesOfChatGetResponseDTO'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Get messages by chat
      tags:
      - Messages
  /api/posts:
    get:
      description: Get all posts in the system
      parameters:
      - description: 'Number of posts per page (default: 0 - all posts)'
        in: query
        name: limit
        type: integer
      - description: 'Page number (default: 0 - first page)'
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PostGetResponseDTO'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Get all posts
      tags:
      - Posts
    post:
      consumes:
      - application/json
      description: Creates a new post
      parameters:
      - description: Post data
        in: body
        name: postCreateRequestDTO
        required: true
        schema:
          $ref: '#/definitions/models.PostCreateRequestDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.PostGetResponseDTO'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Create a post
      tags:
      - Posts
  /api/posts/{postID}:
    delete:
      description: Deletes a post
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      summary: Delete a post
      tags:
      - Posts
    get:
      description: Retrieves a specific post by its ID
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PostGetResponseDTO'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Get a post by ID
      tags:
      - Posts
  /api/posts/feed:
    get:
      consumes:
      - application/json
      description: Get all posts of the users the logged in user follows (feed)
      parameters:
      - description: 'Number of posts per page (default: 0 - all posts)'
        in: query
        name: limit
        type: integer
      - description: 'Page number (default: 0 - first page)'
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PostGetResponseDTO'
            type: array
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Get posts for current user
      tags:
      - Posts
  /api/posts/gpt:
    get:
      description: Create a post generated by OPENAI ChatGPT
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "500":
          description: Internal Server Error
      summary: Create post using ChatGPT
      tags:
      - Posts
  /api/posts/user/{userID}:
    get:
      description: Retrieves all posts of a specific user
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      - default: 0
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: Page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PostGetResponseDTO'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Get posts by user ID
      tags:
      - Posts
  /api/users:
    delete:
      description: Delete the logged-in user
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
      summary: Delete user
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Get a list of users based on query parameters
      parameters:
      - description: Search query
        in: query
        name: query
        type: string
      - description: Limit the number of results per page
        in: query
        name: limit
        type: integer
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserDetailGetResponseDTO'
            type: array
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Get Users
      tags:
      - Users
    patch:
      consumes:
      - application/json
      description: Update the user's information
      parameters:
      - description: User update data
        in: body
        name: userUpdate
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdateRequestDTO'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      summary: Update user
      tags:
      - Users
  /api/users/{userID}:
    get:
      description: Get a user by their ID
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserDetailGetResponseDTO'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
      summary: Get User by ID
      tags:
      - Users
  /api/users/confirm/{token}:
    patch:
      consumes:
      - application/json
      description: Confirm the user's email address using the provided token
      parameters:
      - description: Confirmation token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "404":
          description: Not Found
      summary: Confirm Email
      tags:
      - Users
  /api/users/current:
    get:
      description: Get the logged-in user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserDetailGetResponseDTO'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
      summary: Get Current User
      tags:
      - Users
  /api/users/forgotPassword:
    patch:
      consumes:
      - application/json
      description: Reset the forgotten password
      parameters:
      - description: User update password forgotten data
        in: body
        name: updatePasswordForgotten
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdatePasswordForgottenRequestDTO'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Reset forgotten password
      tags:
      - Users
  /api/users/login:
    post:
      consumes:
      - application/json
      description: Authenticate and login a user
      parameters:
      - description: User credentials
        in: body
        name: userLoginRequestDTO
        required: true
        schema:
          $ref: '#/definitions/models.UserLoginRequestDTO'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: User Login
      tags:
      - Users
  /api/users/logout:
    post:
      description: Logout the user
      responses:
        "200":
          description: OK
      summary: User Logout
      tags:
      - Users
  /api/users/signup:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User information
        in: body
        name: userCreateDTO
        required: true
        schema:
          $ref: '#/definitions/models.UserCreateRequestDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserGetResponseDTO'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: User Signup
      tags:
      - Users
  /api/users/updatePassword:
    patch:
      consumes:
      - application/json
      description: Update the password of the logged-in user
      parameters:
      - description: New password
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdatePasswortRequestDTO'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Update Password
      tags:
      - Users
  /api/users/validate:
    get:
      description: Validate the user token and check if the user is authorized
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Validate User Token
      tags:
      - Users
swagger: "2.0"
